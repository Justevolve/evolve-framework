{
    "docs": [
        {
            "location": "/", 
            "text": "Evolve Framework\n\n\nEvolve Framework (\nEF\n) is a plugin for \nWordPress\n that offers a variety of tools to ease the development of themes and plugins.\n\n\nWho's it for\n\n\nEF is primarily directed to developers that are already familiar with \nWordPress development practices\n; however, EF wants to have an entry barrier as low as it can possibly be, so that it can be more useful is less time also for those who are beginning tackling WordPress development.\n\n\nPhilosophy\n\n\nBeing a plugin, EF can be activated or deactivated at will. This is a fundamental difference compared to other frameworks that are included in the products that use them (drop-in).\n\n\nEF wants to provide a set of \nlow impact\n tools that makes the plugin a companion for development, rather than a collection of pre-implemented, tweakable, features: if you're using the framework, you should only take advantage of the things you need, without unnecessary stuff being automatically activated, if not relevant for your project.\n\n\nEF aims at being \npredictable\n, by enforcing a series of \nconventions and patterns\n, wherever possible.\n\n\nLast but not least, EF is designed to be \nscalable\n, maintained over time and fully compatible with \nlocalization\n tools.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#evolve-framework", 
            "text": "Evolve Framework ( EF ) is a plugin for  WordPress  that offers a variety of tools to ease the development of themes and plugins.", 
            "title": "Evolve Framework"
        }, 
        {
            "location": "/#whos-it-for", 
            "text": "EF is primarily directed to developers that are already familiar with  WordPress development practices ; however, EF wants to have an entry barrier as low as it can possibly be, so that it can be more useful is less time also for those who are beginning tackling WordPress development.", 
            "title": "Who's it for"
        }, 
        {
            "location": "/#philosophy", 
            "text": "Being a plugin, EF can be activated or deactivated at will. This is a fundamental difference compared to other frameworks that are included in the products that use them (drop-in).  EF wants to provide a set of  low impact  tools that makes the plugin a companion for development, rather than a collection of pre-implemented, tweakable, features: if you're using the framework, you should only take advantage of the things you need, without unnecessary stuff being automatically activated, if not relevant for your project.  EF aims at being  predictable , by enforcing a series of  conventions and patterns , wherever possible.  Last but not least, EF is designed to be  scalable , maintained over time and fully compatible with  localization  tools.", 
            "title": "Philosophy"
        }, 
        {
            "location": "/install/", 
            "text": "Getting started\n\n\nAt the moment, the framework is in alpha stage. The software is still in development, so using it in production environments is not recommended.\n\n\nFeedback on the project is more than welcome; should you find a bug, please head over to the \nissues tracker\n on the project page.\n\n\nRequirements\n\n\nThe requirements that need to be met in order to make the framework run on a WordPress installation are:\n\n\n\n\nWordPress 4.0\n or higher\n\n\nPHP 5.2.4\n or higher\n\n\nMySQL 5.0\n or higher\n\n\n\n\nInstallation\n\n\nDownload the latest version available from \nthis page\n and install the plugin in WordPress, making sure that the name of the plugin folder is \nevolve-framework\n.\n\n\nRenaming the plugin folder is important in order for the plugin to be able to support update notifications.\n\n\nAfter completing the plugin installation, activate it from the Plugins screen in the WordPress admin.\n\n\nAlthough this is not recommended, you can download the development version of the framework off the \nmaster\n branch, you can clone it right from the Github repository. Update notifications are turned off in this scenario.", 
            "title": "Requirements and installation"
        }, 
        {
            "location": "/install/#getting-started", 
            "text": "At the moment, the framework is in alpha stage. The software is still in development, so using it in production environments is not recommended.  Feedback on the project is more than welcome; should you find a bug, please head over to the  issues tracker  on the project page.", 
            "title": "Getting started"
        }, 
        {
            "location": "/install/#requirements", 
            "text": "The requirements that need to be met in order to make the framework run on a WordPress installation are:   WordPress 4.0  or higher  PHP 5.2.4  or higher  MySQL 5.0  or higher", 
            "title": "Requirements"
        }, 
        {
            "location": "/install/#installation", 
            "text": "Download the latest version available from  this page  and install the plugin in WordPress, making sure that the name of the plugin folder is  evolve-framework .  Renaming the plugin folder is important in order for the plugin to be able to support update notifications.  After completing the plugin installation, activate it from the Plugins screen in the WordPress admin.  Although this is not recommended, you can download the development version of the framework off the  master  branch, you can clone it right from the Github repository. Update notifications are turned off in this scenario.", 
            "title": "Installation"
        }, 
        {
            "location": "/conventions/", 
            "text": "Conventions\n\n\nApart from sticking to the \nofficial WordPress documentation\n and its \ncoding standards\n, the code contained within EF follows a series of conventions that should ensure that maintenance and compatibility between components are as smooth as possible.\n\n\nAs mentioned in the \nrequirements section\n, the code within the framework is compatible with PHP 5.2.4, which is also the minimum PHP version required by WordPress.\n\n\nHere are the conventions used throughout the framework:\n\n\nConstants\n\n\nAll of the framework constants are defined in the \nevolve-framework.php\n file, which is located in the plugin folder.\n\n\nConstants are all caps and share the \nEV_\n prefix.\n\n\nClasses\n\n\nAll of the PHP classes declared in the framework share the \nEv_\n prefix.\n\n\nFunctions\n\n\nAll of the PHP functions declared in the framework share the \nev_\n prefix.\n\n\nCSS: \nclass\n attributes and \nid\ns\n\n\nBoth on frontend and WordPress admin, CSS \nclass\n attributes and \nid\ns are prefixed with \nev-\n.\n\n\nFilters\n\n\nFilter names all start with \nev\n and are composed following a particular convention that allows to express the specificity of a filter in a given context: \nprefix[subject:value]\n.\n\n\nFor example, the following filter manages the addition of fields in a meta box called \ntest\n shown in page editing screens:\n\n\nev[post_type:page][metabox:test]\n,\n\n\nbut you could also do the same for pages with a specific page template associated to them:\n\n\nev[post_type:page][template:template-test.php][metabox:test]\n.", 
            "title": "Conventions"
        }, 
        {
            "location": "/conventions/#conventions", 
            "text": "Apart from sticking to the  official WordPress documentation  and its  coding standards , the code contained within EF follows a series of conventions that should ensure that maintenance and compatibility between components are as smooth as possible.  As mentioned in the  requirements section , the code within the framework is compatible with PHP 5.2.4, which is also the minimum PHP version required by WordPress.  Here are the conventions used throughout the framework:", 
            "title": "Conventions"
        }, 
        {
            "location": "/conventions/#constants", 
            "text": "All of the framework constants are defined in the  evolve-framework.php  file, which is located in the plugin folder.  Constants are all caps and share the  EV_  prefix.", 
            "title": "Constants"
        }, 
        {
            "location": "/conventions/#classes", 
            "text": "All of the PHP classes declared in the framework share the  Ev_  prefix.", 
            "title": "Classes"
        }, 
        {
            "location": "/conventions/#functions", 
            "text": "All of the PHP functions declared in the framework share the  ev_  prefix.", 
            "title": "Functions"
        }, 
        {
            "location": "/conventions/#css-class-attributes-and-ids", 
            "text": "Both on frontend and WordPress admin, CSS  class  attributes and  id s are prefixed with  ev- .", 
            "title": "CSS: class attributes and ids"
        }, 
        {
            "location": "/conventions/#filters", 
            "text": "Filter names all start with  ev  and are composed following a particular convention that allows to express the specificity of a filter in a given context:  prefix[subject:value] .  For example, the following filter manages the addition of fields in a meta box called  test  shown in page editing screens:  ev[post_type:page][metabox:test] ,  but you could also do the same for pages with a specific page template associated to them:  ev[post_type:page][template:template-test.php][metabox:test] .", 
            "title": "Filters"
        }, 
        {
            "location": "/themes-plugins/", 
            "text": "Integration\n\n\nDue to its plugin nature, EF can be activated or deactivated at will. This is a fundamental difference compared to other frameworks that are included in the products that use them (drop-in).\n\n\nFor this reason it is essential to put yourself in the condition of knowing whether the framework is currently active in your installation or not.\n\n\nDepending of whether the framework is active or not, you essentially have two strategies:\n\n\n\n\nif the theme/plugin functionality relies entirely on the framework being active, you can opt to completely halt the execution of the said theme/plugin,\n\n\nalternatively, you can choose to keep running the theme/plugin's code, making sure to manage the case that the framework isn't currently active.\n\n\n\n\nThe latter is the preferred solution, since it would allow the system to degrade nicely. For example, a plugin that declares a Custom Post Type and that relies on the framework to offer additional functionality could choose to keep declaring the CPT even when the framework is not active.\n\n\nTheme\n\n\nTo completely prevent the theme from being shown on frontend if the framework is not currently active, you could write something along these lines in the \nfunctions.php\n file.\n\n\n$is_login_page = in_array( $GLOBALS[\npagenow\n], array( \nwp-login.php\n, \nwp-register.php\n );\n\nif ( ! class_exists( \nEv_Framework\n ) \n ! is_admin() \n ! $is_login_page ) {\n    wp_die( \nEvolve Framework required\n );\n}\n\n\n\n\nPlugin\n\n\nInitialization for framework-based plugins must happen at the \nplugins_loaded\n hook, since that action is executed as soon as all active plugins are loaded.\n\n\nYou can then verify the activation of the framework plugin by testing the existence of the \nEv_Framework\n PHP class:\n\n\n/**\n * Load the plugin instance.\n */\nfunction ev_plugin_load() {\n    if ( ! class_exists( \nEv_Framework\n ) ) {\n        return;\n    }\n\n    Ev_Plugin::instance();\n}\n\nadd_action( \nplugins_loaded\n, \nev_plugin_load\n );", 
            "title": "Themes and plugins"
        }, 
        {
            "location": "/themes-plugins/#integration", 
            "text": "Due to its plugin nature, EF can be activated or deactivated at will. This is a fundamental difference compared to other frameworks that are included in the products that use them (drop-in).  For this reason it is essential to put yourself in the condition of knowing whether the framework is currently active in your installation or not.  Depending of whether the framework is active or not, you essentially have two strategies:   if the theme/plugin functionality relies entirely on the framework being active, you can opt to completely halt the execution of the said theme/plugin,  alternatively, you can choose to keep running the theme/plugin's code, making sure to manage the case that the framework isn't currently active.   The latter is the preferred solution, since it would allow the system to degrade nicely. For example, a plugin that declares a Custom Post Type and that relies on the framework to offer additional functionality could choose to keep declaring the CPT even when the framework is not active.", 
            "title": "Integration"
        }, 
        {
            "location": "/themes-plugins/#theme", 
            "text": "To completely prevent the theme from being shown on frontend if the framework is not currently active, you could write something along these lines in the  functions.php  file.  $is_login_page = in_array( $GLOBALS[ pagenow ], array(  wp-login.php ,  wp-register.php  );\n\nif ( ! class_exists(  Ev_Framework  )   ! is_admin()   ! $is_login_page ) {\n    wp_die(  Evolve Framework required  );\n}", 
            "title": "Theme"
        }, 
        {
            "location": "/themes-plugins/#plugin", 
            "text": "Initialization for framework-based plugins must happen at the  plugins_loaded  hook, since that action is executed as soon as all active plugins are loaded.  You can then verify the activation of the framework plugin by testing the existence of the  Ev_Framework  PHP class:  /**\n * Load the plugin instance.\n */\nfunction ev_plugin_load() {\n    if ( ! class_exists(  Ev_Framework  ) ) {\n        return;\n    }\n\n    Ev_Plugin::instance();\n}\n\nadd_action(  plugins_loaded ,  ev_plugin_load  );", 
            "title": "Plugin"
        }, 
        {
            "location": "/data/", 
            "text": "Data management\n\n\nOne of the primary features provided by the framework is custom data management, that is the ability to manage (adding, editing, removing) custom data that's relevant for your project.\n\n\nCurrently the framework manages two types of data:\n\n\n\n\noption\n data are project-wide settings,\n\n\nmeta\n data associated to posts, pages and other Custom Post Types entries.\n\n\n\n\nThese implementations are based on WordPress' \nOptions API\n and \nMetadata API\n respectively.\n\n\nCurrently the framework doesn't manage data associated to users or taxonomies, but we'd love to do something about that in the future.\n\n\nData structure\n\n\nCustom options are stored in the \nwp_options\n table of WordPress' database and are serialized under the \nev\n option key. This turns out pretty useful when you want to batch-export all of the custom options in your installation.\n\n\nTo retrieve the entire array of custom data options, you could use the standard WordPress function to retrieve options: \nget_option( 'ev' )\n.\n\n\nPost Type meta data are stored individually.\n\n\nSee the \nData types\n documentation for more information.\n\n\nUtility functions\n\n\nTo manipulate custom options the following functions are available:\n\n\n\n\nev_get_option( $key )\n\n\nReturns the value of an option.\n\n\nReturns \nfalse\n if the option doesn't exist.\n\n\nThe returned value is filtered through \nev_get_option[key:{$key}]\n.\n\n\n\n\n\n\nev_update_option( $key, $value )\n\n\nUpdates the value of an option.\n\n\n\n\n\n\nev_delete_option( $key )\n\n\nRemoves an option.", 
            "title": "Data management"
        }, 
        {
            "location": "/data/#data-management", 
            "text": "One of the primary features provided by the framework is custom data management, that is the ability to manage (adding, editing, removing) custom data that's relevant for your project.  Currently the framework manages two types of data:   option  data are project-wide settings,  meta  data associated to posts, pages and other Custom Post Types entries.   These implementations are based on WordPress'  Options API  and  Metadata API  respectively.  Currently the framework doesn't manage data associated to users or taxonomies, but we'd love to do something about that in the future.", 
            "title": "Data management"
        }, 
        {
            "location": "/data/#data-structure", 
            "text": "Custom options are stored in the  wp_options  table of WordPress' database and are serialized under the  ev  option key. This turns out pretty useful when you want to batch-export all of the custom options in your installation.  To retrieve the entire array of custom data options, you could use the standard WordPress function to retrieve options:  get_option( 'ev' ) .  Post Type meta data are stored individually.  See the  Data types  documentation for more information.", 
            "title": "Data structure"
        }, 
        {
            "location": "/data/#utility-functions", 
            "text": "To manipulate custom options the following functions are available:   ev_get_option( $key )  Returns the value of an option.  Returns  false  if the option doesn't exist.  The returned value is filtered through  ev_get_option[key:{$key}] .    ev_update_option( $key, $value )  Updates the value of an option.    ev_delete_option( $key )  Removes an option.", 
            "title": "Utility functions"
        }, 
        {
            "location": "/data-types/", 
            "text": "Data types\n\n\nHere's a list of all the framework data types (fields) available:\n\n\n\n\nText\n\n\nTextarea\n\n\nSelect\n\n\nRadio\n\n\nNumber\n\n\nMultiple select\n\n\nImage\n\n\nIcon\n\n\nDivider\n\n\nDescription\n\n\nColor\n\n\nCheckbox\n\n\n\n\nAll the data types are defined by a common set of parameters:\n\n\n\n\ntype\n: the field data type,\n\n\nhandle\n: the key with whom the data will be stored, (no spaces, slug-like),\n\n\nlabel\n: the label displayed in the backend interface,\n\n\nhelp\n \n(optional)\n: a descriptive text for the field to be displayed in the backend interface,\n\n\ndefault\n \n(optional)\n: the default value for the field, if it hasn't been saved yet,\n\n\n\n\nThe \nlabel\n parameter supports three different styles:\n\n\n\n\ninline\n \n(default)\n: the label is displayed on the side of the field,\n\n\nblock\n: the label is displayed above the field,\n\n\nhidden\n: the label is not shown.\n\n\n\n\nIn order to enable a specific display mode, you have to set the \nlabel\n value as an array, with the \ntext\n key containing the label text and the \ntype\n key containing the desired display mode:\n\n\nlabel\n =\n array(\n    \ntext\n =\n \nLabel title\n,\n    \ntype\n =\n \nblock\n\n)\n\n\n\n\nThe \nhelp\n parameter supports two different styles:\n\n\n\n\ninline\n \n(default)\n: the help text is displayed below the field label,\n\n\ntooltip\n: the help text is displayed as a tooltip.\n\n\n\n\nIn order to enable a specific display mode, you have to set the \nhelp\n value as an array, with the \ntext\n key containing the help text and the \ntype\n key containing the desired display mode:\n\n\nhelp\n =\n array(\n    \ntext\n =\n \nField help text\n,\n    \ntype\n =\n \ntooltip\n\n)\n\n\n\n\nMost of the fields support specific configuration parameters. These parameters must be added under \nconfig\n as an array:\n\n\nconfig\n =\n array(\n    // Configuration parameters...\n    \ndata\n =\n array()\n)\n\n\n\n\nText\n\n\narray(\n    \ntype\n   =\n \ntext\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n    \nconfig\n =\n array(\n        \nsize\n =\n \n\n    )\n)\n\n\n\n\nTextarea\n\n\narray(\n    \ntype\n   =\n \ntextarea\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n    \nconfig\n =\n array(\n        \nrows\n =\n \n2\n,\n        \ncols\n =\n \n20\n,\n        \nrich\n =\n false\n    )\n)\n\n\n\n\nWhen set to \ntrue\n, the \nrich\n parameter will generate a rich textarea field with \nTinyMCE\n enabled.\n\n\nSelect\n\n\narray(\n    \ntype\n   =\n \nselect\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n    \nconfig\n =\n array(\n        \ndata\n =\n array()\n    )\n)\n\n\n\n\nThe select options are listed under the \nconfig\n \n \ndata\n key as an array. The key value represents the key with whom the data will be stored:\n\n\ndata\n =\n array(\n    \noption1\n =\n __( \nOption 1\n, \nev_framework\n ),\n    \noption2\n =\n __( \nOption 2\n, \nev_framework\n ),\n    \noption3\n =\n __( \nOption 3\n, \nev_framework\n ),\n)\n\n\n\n\nRadio\n\n\narray(\n    \ntype\n   =\n \nradio\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n    \nconfig\n =\n array(\n        \ndata\n =\n array()\n    )\n)\n\n\n\n\nThe radio options are listed under the \nconfig\n \n \ndata\n key as an array. The key value represents the key with whom the data will be stored:\n\n\ndata\n =\n array(\n    \noption1\n =\n __( \nOption 1\n, \nev_framework\n ),\n    \noption2\n =\n __( \nOption 2\n, \nev_framework\n ),\n    \noption3\n =\n __( \nOption 3\n, \nev_framework\n ),\n)\n\n\n\n\nNumber\n\n\narray(\n    \ntype\n   =\n \nnumber\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n    \nconfig\n =\n array(\n        \nstep\n  =\n \n, // Increment value\n        \nmin\n   =\n \n, // Minimum value\n        \nmax\n   =\n \n  // Maximum value\n    )\n)\n\n\n\n\nMultiple select\n\n\narray(\n    \ntype\n   =\n \nmultiple_select\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n    \nconfig\n =\n array(\n        \nvertical\n =\n false,\n        \ndata\n     =\n array()\n    )\n)\n\n\n\n\nThe multiple select options are listed under the \nconfig\n \n \ndata\n key as an array. The key value represents the key with whom the data will be stored:\n\n\ndata\n =\n array(\n    \noption1\n =\n __( \nOption 1\n, \nev_framework\n ),\n    \noption2\n =\n __( \nOption 2\n, \nev_framework\n ),\n    \noption3\n =\n __( \nOption 3\n, \nev_framework\n ),\n)\n\n\n\n\nThe order of the selected options can be altered by dragging the selected items.\n\n\nThe default value for the \nvertical\n parameter is \nfalse\n: this will cause the selected selected items to be displayed inline.\nWhen setting the value to \ntrue\n, the selected items will be stacked vertically.\n\n\nThe field stores a series of comma-separated values under a single key.\n\n\nImage\n\n\nThe image field data is what we define as \ncomplex\n, which means that its structure is an array composed by one or more subkeys and that will be serialized upon saving. The structure of the saved data is as follows:\n\n\n[desktop] =\n Array\n    (\n        [1] =\n Array \n            (\n                [id] =\n 26\n                [image_size] =\n full\n            )\n    )\n\n\n\n\nIn the above mentioned example, \nid\n represents the selected attachment ID and \nimage_size\n is the name of the image size selected, when the \nimage_size\n parameter is set to \ntrue\n.\n\n\nConcerning the \ndesktop\n and \n1\n keys, they represent the default screen width and density.\n\n\narray(\n    \ntype\n   =\n \nimage\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n    \nconfig\n =\n array(\n        \nmultiple\n    =\n false,\n        \nsortable\n    =\n false,\n        \nimage_size\n  =\n false, // Display a select listing the image sizes available\n        \nthumb_size\n  =\n \nmedium\n // Size of the preview image loaded in the admin interface\n    )\n)\n\n\n\n\nWhen set to \ntrue\n, the \nmultiple\n parameter allows to create a multiple image upload field.\n\n\nThe \nsortable\n parameter when used in conjunction with the \nmultiple\n parameter allows to enable the sorting on the uploaded images.\n\n\nIcon\n\n\narray(\n    \ntype\n   =\n \nicon\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n    \nconfig\n =\n array()\n)\n\n\n\n\nThe icon data type is also a \ncomplex\n field, which means that it will be serialized upon saving. The structure of the saved data is as follows:\n\n\n\n\nset\n: the icon library name,\n\n\nicon\n: the selected icon code,\n\n\nprefix\n: the icon library prefix.\n\n\n\n\nConfiguration\n\n\nIn order to add a new icon font, you can use the \nev_get_icon_fonts\n filter. The filter acceps one parameter, representing an array of the already defined icon libraries. Each library is structured as follows:\n\n\narray(\n  'name'    =\n 'library-name',\n  'label'   =\n 'Library label',\n  'url'     =\n \nURL to the library's CSS file\n,\n  'prefix'  =\n '',  // Library's CSS prefix, (optional)\n  'mapping' =\n array(\n     'fa-envelope-o',\n     'fa-heart',\n     // ...\n)\n\n\n\n\nDivider\n\n\narray(\n    \ntype\n   =\n \ndivider\n,\n    \nhandle\n =\n \n,\n    \ntext\n   =\n \n,\n    \nconfig\n =\n array(\n        \nstyle\n =\n \nsection_break\n\n    )\n)\n\n\n\n\nThis field is not stored in the database. The divider field can have different styles, that are set by changing the value of its \nconfig\n \n \nstyle\n setting:\n\n\n\n\nsection_break\n: the divider visually breaks the flow of the page,\n\n\nin_page\n: the divider text is inserted in the flow of the page.\n\n\n\n\nWhen no \nstyle\n configuration is present, the \nsection_break\n style will be used as default.\n\n\nDescription\n\n\narray(\n    \ntype\n   =\n \ndescription\n,\n    \nhandle\n =\n \n,\n    \ntext\n   =\n \n,\n    \nconfig\n =\n array(\n        \nstyle\n =\n \nstandard\n\n    )\n)\n\n\n\n\nThis field is not stored in the database. The description field can have different styles, that are set by changing the value of its \nconfig\n \n \nstyle\n setting:\n\n\n\n\nstandard\n: a text block with no formatting,\n\n\ninfo\n: an informative text block,\n\n\nimportant\n a text block representing a warning.\n\n\n\n\nWhen no \nstyle\n configuration is present, the \nstandard\n style will be used as default.\n\n\nColor\n\n\narray(\n    \ntype\n   =\n \ncolor\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n)\n\n\n\n\nThe field stores an HEX value of the selected color, with the \n#\n symbol included.\n\n\nCheckbox\n\n\narray(\n    \ntype\n   =\n \ncheckbox\n,\n    \nhandle\n =\n \n,\n    \nlabel\n  =\n \n,\n    \nhelp\n   =\n \n\n)\n\n\n\n\nThe field stores one between \n0\n and \n1\n, depending on the checkbox state.\n\n\n\n\nRepeatable fields\n\n\nA field can be declared to be \"repeatable\", which means that it can be duplicated multiple times using the same control. Repeatable fiels are saved using the very same \nhandle\n parameter, and they are serialized.\n\n\nTo set a field to be repeatable, just add a \nrepeatable\n key to the field definition as set it to \ntrue\n:\n\n\narray(\n    \ntype\n       =\n \ntext\n,\n    \nhandle\n     =\n \n,\n    \nlabel\n      =\n \n,\n    \nhelp\n       =\n \n,\n    \nrepeatable\n =\n true\n)", 
            "title": "Data types"
        }, 
        {
            "location": "/data-types/#data-types", 
            "text": "Here's a list of all the framework data types (fields) available:   Text  Textarea  Select  Radio  Number  Multiple select  Image  Icon  Divider  Description  Color  Checkbox   All the data types are defined by a common set of parameters:   type : the field data type,  handle : the key with whom the data will be stored, (no spaces, slug-like),  label : the label displayed in the backend interface,  help   (optional) : a descriptive text for the field to be displayed in the backend interface,  default   (optional) : the default value for the field, if it hasn't been saved yet,   The  label  parameter supports three different styles:   inline   (default) : the label is displayed on the side of the field,  block : the label is displayed above the field,  hidden : the label is not shown.   In order to enable a specific display mode, you have to set the  label  value as an array, with the  text  key containing the label text and the  type  key containing the desired display mode:  label  =  array(\n     text  =   Label title ,\n     type  =   block \n)  The  help  parameter supports two different styles:   inline   (default) : the help text is displayed below the field label,  tooltip : the help text is displayed as a tooltip.   In order to enable a specific display mode, you have to set the  help  value as an array, with the  text  key containing the help text and the  type  key containing the desired display mode:  help  =  array(\n     text  =   Field help text ,\n     type  =   tooltip \n)  Most of the fields support specific configuration parameters. These parameters must be added under  config  as an array:  config  =  array(\n    // Configuration parameters...\n     data  =  array()\n)", 
            "title": "Data types"
        }, 
        {
            "location": "/data-types/#text", 
            "text": "array(\n     type    =   text ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n     config  =  array(\n         size  =   \n    )\n)", 
            "title": "Text"
        }, 
        {
            "location": "/data-types/#textarea", 
            "text": "array(\n     type    =   textarea ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n     config  =  array(\n         rows  =   2 ,\n         cols  =   20 ,\n         rich  =  false\n    )\n)  When set to  true , the  rich  parameter will generate a rich textarea field with  TinyMCE  enabled.", 
            "title": "Textarea"
        }, 
        {
            "location": "/data-types/#select", 
            "text": "array(\n     type    =   select ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n     config  =  array(\n         data  =  array()\n    )\n)  The select options are listed under the  config     data  key as an array. The key value represents the key with whom the data will be stored:  data  =  array(\n     option1  =  __(  Option 1 ,  ev_framework  ),\n     option2  =  __(  Option 2 ,  ev_framework  ),\n     option3  =  __(  Option 3 ,  ev_framework  ),\n)", 
            "title": "Select"
        }, 
        {
            "location": "/data-types/#radio", 
            "text": "array(\n     type    =   radio ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n     config  =  array(\n         data  =  array()\n    )\n)  The radio options are listed under the  config     data  key as an array. The key value represents the key with whom the data will be stored:  data  =  array(\n     option1  =  __(  Option 1 ,  ev_framework  ),\n     option2  =  __(  Option 2 ,  ev_framework  ),\n     option3  =  __(  Option 3 ,  ev_framework  ),\n)", 
            "title": "Radio"
        }, 
        {
            "location": "/data-types/#number", 
            "text": "array(\n     type    =   number ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n     config  =  array(\n         step   =   , // Increment value\n         min    =   , // Minimum value\n         max    =     // Maximum value\n    )\n)", 
            "title": "Number"
        }, 
        {
            "location": "/data-types/#multiple-select", 
            "text": "array(\n     type    =   multiple_select ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n     config  =  array(\n         vertical  =  false,\n         data      =  array()\n    )\n)  The multiple select options are listed under the  config     data  key as an array. The key value represents the key with whom the data will be stored:  data  =  array(\n     option1  =  __(  Option 1 ,  ev_framework  ),\n     option2  =  __(  Option 2 ,  ev_framework  ),\n     option3  =  __(  Option 3 ,  ev_framework  ),\n)  The order of the selected options can be altered by dragging the selected items.  The default value for the  vertical  parameter is  false : this will cause the selected selected items to be displayed inline.\nWhen setting the value to  true , the selected items will be stacked vertically.  The field stores a series of comma-separated values under a single key.", 
            "title": "Multiple select"
        }, 
        {
            "location": "/data-types/#image", 
            "text": "The image field data is what we define as  complex , which means that its structure is an array composed by one or more subkeys and that will be serialized upon saving. The structure of the saved data is as follows:  [desktop] =  Array\n    (\n        [1] =  Array \n            (\n                [id] =  26\n                [image_size] =  full\n            )\n    )  In the above mentioned example,  id  represents the selected attachment ID and  image_size  is the name of the image size selected, when the  image_size  parameter is set to  true .  Concerning the  desktop  and  1  keys, they represent the default screen width and density.  array(\n     type    =   image ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n     config  =  array(\n         multiple     =  false,\n         sortable     =  false,\n         image_size   =  false, // Display a select listing the image sizes available\n         thumb_size   =   medium  // Size of the preview image loaded in the admin interface\n    )\n)  When set to  true , the  multiple  parameter allows to create a multiple image upload field.  The  sortable  parameter when used in conjunction with the  multiple  parameter allows to enable the sorting on the uploaded images.", 
            "title": "Image"
        }, 
        {
            "location": "/data-types/#icon", 
            "text": "array(\n     type    =   icon ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n     config  =  array()\n)  The icon data type is also a  complex  field, which means that it will be serialized upon saving. The structure of the saved data is as follows:   set : the icon library name,  icon : the selected icon code,  prefix : the icon library prefix.   Configuration  In order to add a new icon font, you can use the  ev_get_icon_fonts  filter. The filter acceps one parameter, representing an array of the already defined icon libraries. Each library is structured as follows:  array(\n  'name'    =  'library-name',\n  'label'   =  'Library label',\n  'url'     =   URL to the library's CSS file ,\n  'prefix'  =  '',  // Library's CSS prefix, (optional)\n  'mapping' =  array(\n     'fa-envelope-o',\n     'fa-heart',\n     // ...\n)", 
            "title": "Icon"
        }, 
        {
            "location": "/data-types/#divider", 
            "text": "array(\n     type    =   divider ,\n     handle  =   ,\n     text    =   ,\n     config  =  array(\n         style  =   section_break \n    )\n)  This field is not stored in the database. The divider field can have different styles, that are set by changing the value of its  config     style  setting:   section_break : the divider visually breaks the flow of the page,  in_page : the divider text is inserted in the flow of the page.   When no  style  configuration is present, the  section_break  style will be used as default.", 
            "title": "Divider"
        }, 
        {
            "location": "/data-types/#description", 
            "text": "array(\n     type    =   description ,\n     handle  =   ,\n     text    =   ,\n     config  =  array(\n         style  =   standard \n    )\n)  This field is not stored in the database. The description field can have different styles, that are set by changing the value of its  config     style  setting:   standard : a text block with no formatting,  info : an informative text block,  important  a text block representing a warning.   When no  style  configuration is present, the  standard  style will be used as default.", 
            "title": "Description"
        }, 
        {
            "location": "/data-types/#color", 
            "text": "array(\n     type    =   color ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n)  The field stores an HEX value of the selected color, with the  #  symbol included.", 
            "title": "Color"
        }, 
        {
            "location": "/data-types/#checkbox", 
            "text": "array(\n     type    =   checkbox ,\n     handle  =   ,\n     label   =   ,\n     help    =   \n)  The field stores one between  0  and  1 , depending on the checkbox state.", 
            "title": "Checkbox"
        }, 
        {
            "location": "/data-types/#repeatable-fields", 
            "text": "A field can be declared to be \"repeatable\", which means that it can be duplicated multiple times using the same control. Repeatable fiels are saved using the very same  handle  parameter, and they are serialized.  To set a field to be repeatable, just add a  repeatable  key to the field definition as set it to  true :  array(\n     type        =   text ,\n     handle      =   ,\n     label       =   ,\n     help        =   ,\n     repeatable  =  true\n)", 
            "title": "Repeatable fields"
        }, 
        {
            "location": "/option-page/", 
            "text": "Option pages\n\n\nOption pages are data fields containers. They can have a one-level structure, or be divided in multiple subsections as tabs.\n\n\nFollowing WordPress way of declaring pages in the admin area, there are two ways to declare an option page that would appear in the admin menu:\n\n\n\n\nto create a top-level page, you should use the \nadd_menu_page\n method of the \nEv_AdminController\n class,\n\n\nto create a sub menu page, you should use the \nadd_submenu_page\n of the same class.\n\n\n\n\nWe suggest to call both methods with their own shortcuts:\n\n\n\n\nev_fw()-\nadmin()-\nadd_menu_page()\n\n\nev_fw()-\nadmin()-\nadd_submenu_page()\n\n\n\n\nMethods are defined as follows:\n\n\n\n\nadd_menu_page( $handle, $title, $fields = array(), $args = array() )\n\n\nhandle\n, a unique name for the page (no spaces, slug-like),\n\n\ntitle\n, the page title that's shown in the admin menu and in the page iself,\n\n\nfields\n, an array of fields that composes the page,\n\n\nargs\n, a configuration array. You can add a unique \ngroup\n subkey that allows to group option pages together. Pages belonging to the same group, will display an extra horizontal navigation.\n\n\n\n\n\n\nadd_submenu_page( $parent, $handle, $title, $fields = array(), $args = array() )\n\n\nThe method shares the same parameters as the \nadd_menu_page\n method, with the only difference being that the first parameter, \nparent\n, must be used to indicate the page of which the one being created will be child of.\n\n\n\n\n\n\n\n\nCheck the \ndata types documentation\n for more information about what fields can be added to pages.\n\n\nTo create an option page you would write something like:\n\n\nfunction my_theme_options_page() {\n    ev_fw()-\nadmin()-\nadd_menu_page( \noptions\n, __( \nOptions\n, \ntextdomain\n ), array(\n        array(\n            \nhandle\n =\n \ncopyright_text\n,\n            \nlabel\n =\n __( \nCopyright text\n, \ntextdomain\n ),\n            \ntype\n =\n \ntext\n,\n        )\n    ) );\n}\n\nadd_action( \ninit\n, \nmy_theme_options_page\n );\n\n\n\n\nTo create a page that's organized in tabs:\n\n\nfunction my_tabbed_theme_options_page() {\n    ev_fw()-\nadmin()-\nadd_menu_page( \noptions\n, __( \nOptions\n, \ntextdomain\n ), array(\n        array(\n            \nhandle\n =\n \nfirst-tab\n,\n            \nlabel\n  =\n __( \nFirst tab\n, \ntextdomain\n ),\n            \ntype\n   =\n \ngroup\n,\n            \nfields\n =\n array(\n                array(\n                    \nhandle\n =\n \ncopyright_text\n,\n                    \nlabel\n =\n __( \nCopyright text\n, \ntextdomain\n ),\n                    \ntype\n =\n \ntext\n,\n                )\n            )\n        ),\n        array(\n            \nhandle\n =\n \nsecond-tab\n,\n            \nlabel\n  =\n __( \nSecond tab\n, \ntextdomain\n ),\n            \ntype\n   =\n \ngroup\n,\n            \nfields\n =\n array(\n                array(\n                    \nhandle\n =\n \nanother_text_field\n,\n                    \nlabel\n =\n __( \nAnother text field\n, \ntextdomain\n ),\n                    \ntype\n =\n \ntext\n,\n                )\n            )\n        ),\n    ) );\n}\n\nadd_action( \ninit\n, \nmy_tabbed_theme_options_page\n );\n\n\n\n\nIf only one tab is defined, the page won't show the tabs navigation.\n\n\nSince the page name is set to \noptions\n, its fields can also be manipulated using the \nev_admin_page[page:options]\n filter.\n\n\nValidation\n\n\nThe system that allows you to create pages, tabs and fields is subject to a strict validation. For example, both tabs and fields must have a non-empty \nhandle\n parameter, their \ntype\n must belong to a field type that's been registered in the system, and so on.\n\n\nIf one of the validation criteria fails, the whole structure will be considered as \"invalid\", and won't be displayed. In many cases this will be due to simple mistakes, that can happen if you don't pay enough attention. In the future, we'll add a debug information message to allow developers to understand precisely what went wrong.", 
            "title": "Option pages"
        }, 
        {
            "location": "/option-page/#option-pages", 
            "text": "Option pages are data fields containers. They can have a one-level structure, or be divided in multiple subsections as tabs.  Following WordPress way of declaring pages in the admin area, there are two ways to declare an option page that would appear in the admin menu:   to create a top-level page, you should use the  add_menu_page  method of the  Ev_AdminController  class,  to create a sub menu page, you should use the  add_submenu_page  of the same class.   We suggest to call both methods with their own shortcuts:   ev_fw()- admin()- add_menu_page()  ev_fw()- admin()- add_submenu_page()   Methods are defined as follows:   add_menu_page( $handle, $title, $fields = array(), $args = array() )  handle , a unique name for the page (no spaces, slug-like),  title , the page title that's shown in the admin menu and in the page iself,  fields , an array of fields that composes the page,  args , a configuration array. You can add a unique  group  subkey that allows to group option pages together. Pages belonging to the same group, will display an extra horizontal navigation.    add_submenu_page( $parent, $handle, $title, $fields = array(), $args = array() )  The method shares the same parameters as the  add_menu_page  method, with the only difference being that the first parameter,  parent , must be used to indicate the page of which the one being created will be child of.     Check the  data types documentation  for more information about what fields can be added to pages.  To create an option page you would write something like:  function my_theme_options_page() {\n    ev_fw()- admin()- add_menu_page(  options , __(  Options ,  textdomain  ), array(\n        array(\n             handle  =   copyright_text ,\n             label  =  __(  Copyright text ,  textdomain  ),\n             type  =   text ,\n        )\n    ) );\n}\n\nadd_action(  init ,  my_theme_options_page  );  To create a page that's organized in tabs:  function my_tabbed_theme_options_page() {\n    ev_fw()- admin()- add_menu_page(  options , __(  Options ,  textdomain  ), array(\n        array(\n             handle  =   first-tab ,\n             label   =  __(  First tab ,  textdomain  ),\n             type    =   group ,\n             fields  =  array(\n                array(\n                     handle  =   copyright_text ,\n                     label  =  __(  Copyright text ,  textdomain  ),\n                     type  =   text ,\n                )\n            )\n        ),\n        array(\n             handle  =   second-tab ,\n             label   =  __(  Second tab ,  textdomain  ),\n             type    =   group ,\n             fields  =  array(\n                array(\n                     handle  =   another_text_field ,\n                     label  =  __(  Another text field ,  textdomain  ),\n                     type  =   text ,\n                )\n            )\n        ),\n    ) );\n}\n\nadd_action(  init ,  my_tabbed_theme_options_page  );  If only one tab is defined, the page won't show the tabs navigation.  Since the page name is set to  options , its fields can also be manipulated using the  ev_admin_page[page:options]  filter.", 
            "title": "Option pages"
        }, 
        {
            "location": "/option-page/#validation", 
            "text": "The system that allows you to create pages, tabs and fields is subject to a strict validation. For example, both tabs and fields must have a non-empty  handle  parameter, their  type  must belong to a field type that's been registered in the system, and so on.  If one of the validation criteria fails, the whole structure will be considered as \"invalid\", and won't be displayed. In many cases this will be due to simple mistakes, that can happen if you don't pay enough attention. In the future, we'll add a debug information message to allow developers to understand precisely what went wrong.", 
            "title": "Validation"
        }, 
        {
            "location": "/metabox/", 
            "text": "Meta boxes\n\n\nOption pages are data fields containers. They can have a one-level structure, or be divided in multiple subsections as tabs.\n\n\nTo create a meta box you should refer to the \nadd_meta_box\n method in the \nEv_AdminController\n class; for example:\n\n\nev_fw()-\nadmin()-\nadd_meta_box( \ntheme-options\n, __( \nTheme options\n, \ntextdomain\n ), array( \npost\n, \npage\n ), array() );\n\n\n\n\nThe method is defined as follows:\n\n\n\n\nadd_menu_page( $handle, $title, $post_types = 'post', $fields = array() )\n\n\nhandle\n, a unique name for the meta box (no spaces, slug-like),\n\n\ntitle\n, the meta box title that's shown in admin editing screens,\n\n\npost_types\n, an array of post types that will display the meta box,\n\n\nargs\n, an array of fields that composes the meta box.\n\n\n\n\n\n\n\n\nCheck the \ndata types documentation\n for more information about what fields can be added to meta boxes.\n\n\nTo create a meta box you would write something like:\n\n\nfunction my_theme_options_meta_box() {\n    ev_fw()-\nadmin()-\nadd_meta_box( \noptions\n, __( \nOptions\n, \ntextdomain\n ), array( \npost\n, \npage\n ), array(\n        array(\n            \nhandle\n =\n \ncopyright_text\n,\n            \nlabel\n =\n __( \nCopyright text\n, \ntextdomain\n ),\n            \ntype\n =\n \ntext\n,\n        )\n    ) );\n}\n\nadd_action( \ninit\n, \nmy_theme_options_meta_box\n );\n\n\n\n\nTo create a meta box that's organized in tabs:\n\n\nfunction my_tabbed_theme_options_meta_box() {\n    ev_fw()-\nadmin()-\nadd_meta_box( \noptions\n, __( \nOptions\n, \ntextdomain\n ), array( \npost\n, \npage\n ), array(\n        array(\n            \nhandle\n =\n \nfirst-tab\n,\n            \nlabel\n  =\n __( \nFirst tab\n, \ntextdomain\n ),\n            \ntype\n   =\n \ngroup\n,\n            \nfields\n =\n array(\n                array(\n                    \nhandle\n =\n \ncopyright_text\n,\n                    \nlabel\n =\n __( \nCopyright text\n, \ntextdomain\n ),\n                    \ntype\n =\n \ntext\n,\n                )\n            )\n        ),\n        array(\n            \nhandle\n =\n \nsecond-tab\n,\n            \nlabel\n  =\n __( \nSecond tab\n, \ntextdomain\n ),\n            \ntype\n   =\n \ngroup\n,\n            \nfields\n =\n array(\n                array(\n                    \nhandle\n =\n \nanother_text_field\n,\n                    \nlabel\n =\n __( \nAnother text field\n, \ntextdomain\n ),\n                    \ntype\n =\n \ntext\n,\n                )\n            )\n        ),\n    ) );\n}\n\nadd_action( \ninit\n, \nmy_tabbed_theme_options_meta_box\n );\n\n\n\n\nIf only one tab is defined, the meta box won't show the tabs navigation.\n\n\nSince the meta box name is set to \noptions\n, its fields can also be manipulated using the following filters:\n\n\n\n\nev[post_type:$post_type][metabox:options]\n,\n\n\nev[post_type:$post_type][template:{$page_template}][metabox:options]\n, for pages only.\n\n\n\n\nAdding a meta box to a different post type\n\n\nWhen you, or a plugin you happen to be using, is declaring a Custom Post Type, you can attach a previously declared meta box to that post type as well.\n\n\nIn order to do it, you might use the following filter:\n\n\nfunction my_custom_post_types( $types ) {\n    $types[] = \ntest-post-type\n;\n\n    return $types;\n}\n\nadd_filter( \nev_metabox_post_types[metabox:options]\n, \nmy_custom_post_types\n )\n\n\n\n\nValidation\n\n\nSee the validation section in the documentation page about \nOptions pages\n.", 
            "title": "Meta boxes"
        }, 
        {
            "location": "/metabox/#meta-boxes", 
            "text": "Option pages are data fields containers. They can have a one-level structure, or be divided in multiple subsections as tabs.  To create a meta box you should refer to the  add_meta_box  method in the  Ev_AdminController  class; for example:  ev_fw()- admin()- add_meta_box(  theme-options , __(  Theme options ,  textdomain  ), array(  post ,  page  ), array() );  The method is defined as follows:   add_menu_page( $handle, $title, $post_types = 'post', $fields = array() )  handle , a unique name for the meta box (no spaces, slug-like),  title , the meta box title that's shown in admin editing screens,  post_types , an array of post types that will display the meta box,  args , an array of fields that composes the meta box.     Check the  data types documentation  for more information about what fields can be added to meta boxes.  To create a meta box you would write something like:  function my_theme_options_meta_box() {\n    ev_fw()- admin()- add_meta_box(  options , __(  Options ,  textdomain  ), array(  post ,  page  ), array(\n        array(\n             handle  =   copyright_text ,\n             label  =  __(  Copyright text ,  textdomain  ),\n             type  =   text ,\n        )\n    ) );\n}\n\nadd_action(  init ,  my_theme_options_meta_box  );  To create a meta box that's organized in tabs:  function my_tabbed_theme_options_meta_box() {\n    ev_fw()- admin()- add_meta_box(  options , __(  Options ,  textdomain  ), array(  post ,  page  ), array(\n        array(\n             handle  =   first-tab ,\n             label   =  __(  First tab ,  textdomain  ),\n             type    =   group ,\n             fields  =  array(\n                array(\n                     handle  =   copyright_text ,\n                     label  =  __(  Copyright text ,  textdomain  ),\n                     type  =   text ,\n                )\n            )\n        ),\n        array(\n             handle  =   second-tab ,\n             label   =  __(  Second tab ,  textdomain  ),\n             type    =   group ,\n             fields  =  array(\n                array(\n                     handle  =   another_text_field ,\n                     label  =  __(  Another text field ,  textdomain  ),\n                     type  =   text ,\n                )\n            )\n        ),\n    ) );\n}\n\nadd_action(  init ,  my_tabbed_theme_options_meta_box  );  If only one tab is defined, the meta box won't show the tabs navigation.  Since the meta box name is set to  options , its fields can also be manipulated using the following filters:   ev[post_type:$post_type][metabox:options] ,  ev[post_type:$post_type][template:{$page_template}][metabox:options] , for pages only.", 
            "title": "Meta boxes"
        }, 
        {
            "location": "/metabox/#adding-a-meta-box-to-a-different-post-type", 
            "text": "When you, or a plugin you happen to be using, is declaring a Custom Post Type, you can attach a previously declared meta box to that post type as well.  In order to do it, you might use the following filter:  function my_custom_post_types( $types ) {\n    $types[] =  test-post-type ;\n\n    return $types;\n}\n\nadd_filter(  ev_metabox_post_types[metabox:options] ,  my_custom_post_types  )", 
            "title": "Adding a meta box to a different post type"
        }, 
        {
            "location": "/metabox/#validation", 
            "text": "See the validation section in the documentation page about  Options pages .", 
            "title": "Validation"
        }, 
        {
            "location": "/i18n/", 
            "text": "Internationalization\n\n\nThe framework default language is English.\n\n\nThe plugin text domain is \nev_framework\n and the source file for strings translation, \nev_framework.pot\n, is located under the plugin's \nlanguages\n folder.\n\n\nYou can generate a \n.po\n file from the provided \n.pot\n file, which can be edited with an application such as \nPoedit\n that can produce the \n.mo\n file you need for the translation.\n\n\nThe \n.po\n file should be named as follows: \nev_framework-$language_code.po\n.\n\n\nAfter generating the \nev_framework-$language_code.mo\n file, you should put it in the \nwp-content/languages/plugins\n folder of your WordPress installation.\n\n\nIf a translation is already included in the framework package, that translation will have precedence over the one located under \nwp-content/languages/plugins\n.\n\n\nUnless you're already using a localized version of the software, in order for the translation to be active, you must download the relative WordPress language pack by selecting a particular language in \"General\" \n \"Settings\" \n \"Site language\" option, and save the settings.\n\n\nUpdating the translation\n\n\nFollowing an update to the framework, new strings could be introduced in the code base that need translation.\n\n\nTo update an existing translation, the \n.po\n file must be regenerated from the provided updated \n.pot\n file. This operation won't alter previously translated strings.\n\n\nContributing to translation\n\n\nContributions to the framework translation are more than welcome. If you want to make yourself available for translation into a particular language, please \nget in touch\n!", 
            "title": "Internationalization"
        }, 
        {
            "location": "/i18n/#internationalization", 
            "text": "The framework default language is English.  The plugin text domain is  ev_framework  and the source file for strings translation,  ev_framework.pot , is located under the plugin's  languages  folder.  You can generate a  .po  file from the provided  .pot  file, which can be edited with an application such as  Poedit  that can produce the  .mo  file you need for the translation.  The  .po  file should be named as follows:  ev_framework-$language_code.po .  After generating the  ev_framework-$language_code.mo  file, you should put it in the  wp-content/languages/plugins  folder of your WordPress installation.  If a translation is already included in the framework package, that translation will have precedence over the one located under  wp-content/languages/plugins .  Unless you're already using a localized version of the software, in order for the translation to be active, you must download the relative WordPress language pack by selecting a particular language in \"General\"   \"Settings\"   \"Site language\" option, and save the settings.", 
            "title": "Internationalization"
        }, 
        {
            "location": "/i18n/#updating-the-translation", 
            "text": "Following an update to the framework, new strings could be introduced in the code base that need translation.  To update an existing translation, the  .po  file must be regenerated from the provided updated  .pot  file. This operation won't alter previously translated strings.", 
            "title": "Updating the translation"
        }, 
        {
            "location": "/i18n/#contributing-to-translation", 
            "text": "Contributions to the framework translation are more than welcome. If you want to make yourself available for translation into a particular language, please  get in touch !", 
            "title": "Contributing to translation"
        }, 
        {
            "location": "/update/", 
            "text": "Update\n\n\nEF is integrated with WordPress' native update system, which means that should a new version of the framework be available, a notice will appear in the Plugin section of the WordPress admin.\n\n\nThe release list for the plugin is available \nhere\n.\n\n\nDisabling update notifications\n\n\nTo disable update notifications, you could use a filter that was made just for this purpose:\n\n\nadd_filter( \nev_framework_can_update\n, \n__return_false\n );\n\n\n\n\nIt's worth mentioning that if the plugin folder is named something other than \nevolve-framework\n, update notifications are turned off by default.\n\n\nUpdate notifications are also turned off when the plugin folder is a checkout from a Version Control System.", 
            "title": "Update"
        }, 
        {
            "location": "/update/#update", 
            "text": "EF is integrated with WordPress' native update system, which means that should a new version of the framework be available, a notice will appear in the Plugin section of the WordPress admin.  The release list for the plugin is available  here .", 
            "title": "Update"
        }, 
        {
            "location": "/update/#disabling-update-notifications", 
            "text": "To disable update notifications, you could use a filter that was made just for this purpose:  add_filter(  ev_framework_can_update ,  __return_false  );  It's worth mentioning that if the plugin folder is named something other than  evolve-framework , update notifications are turned off by default.  Update notifications are also turned off when the plugin folder is a checkout from a Version Control System.", 
            "title": "Disabling update notifications"
        }
    ]
}